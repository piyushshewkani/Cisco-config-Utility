import Tkinter
from Tkinter import *
import tkFileDialog
import os
import os.path
from netmiko import ConnectHandler
from os import listdir
from os.path import isfile, join
import time
import getpass

print "\n\n ************************ Initiating config script ************************* \n\n"

root = Tkinter.Tk()
root.withdraw() #use to hide tkinter window

currdir = os.getcwd()
user_path = tkFileDialog.askopenfilename(parent=root, initialdir=currdir, title='Please select a file to load the configurations from:')
if len(user_path) > 0:
    print "\n\n You chose %s" % user_path

time.sleep(1)

IP_ADD = raw_input("\n\n Please provide the IP address of the device: ")
USER_NAME = raw_input("\n\n Please provide the login username: ")
PASSWORD = getpass.getpass("\n Please provide login password: \n")
SECRET_PASS = getpass.getpass("\n Please provide enable password: \n")

AUTOLAB = {
	'device_type': 'cisco_ios',
	'ip': IP_ADD,
	'username': USER_NAME,
	'password': PASSWORD,
	'secret' : SECRET_PASS,
	} 

print ("Trying to SSH connect " + IP_ADD + " using login name " + USER_NAME)
time.sleep(1)
net_connect = ConnectHandler(**AUTOLAB)
net_connect.enable()
time.sleep(1)
print ("\n\n ***** SSH connection was succesful ***** ")
net_connect.config_mode()

print ("\n\n ***Pushing the configuration on the device***")

config_file = open(user_path, 'r')
config_file.seek(0)

for each_line in config_file.readlines():
	net_connect.send_command_expect(each_line + '\n')
	time.sleep(1)

print ("\n ***Configuration loaded***")
print ("\n\n Aborting Connection with " + IP_ADD)
config_file.close()
net_connect.disconnect()
time.sleep(1)
print ("\n\n Connection closed")
print (" ******** Closing the Python Script ********** ")